1、问题定义

管理和查找各队参赛信息
 
2、问题分析

能够管理各参赛队的基本信息（包含参赛队编号，参赛作品名称，参赛学校，赛事类别，参赛者，指导老师），
赛事类别共11项（参见大赛官网jsjds.blcu.edu.cn）；包括增加、删除、修改参赛队伍的信息。

从team.txt中读取参赛队伍的基本信息，实现基于二叉排序树的查找。

根据提示输入参赛队编号，若查找成功，输出该赛事类别对应的基本信息（参赛作品名称、参赛学校、赛事类别、参赛者和指导老师信息），
同时，输出查找成功时的平均查找长度ASL；否则，输出“查找失败！”。

能够提供按参赛学校查询参赛团队（或根据赛事类别查询参赛团队），即，根据提示输入参赛学校名称（赛事类别），
若查找成功，输出该学校参赛的（该赛事类别的）所有团队的基本信息，输出的参赛团队按赛事类别有序输出。
（排序算法可从选择排序、插入排序、希尔排序、归并排序、堆排序中任意选择，并为选择算法的原因做出说明。）

3、概要设计

数据结构设计：

参赛队伍的数据结构：结构体--Team 用于存储参赛队的基本信息（包含参赛队编号，参赛作品名称，参赛学校，赛事类别，参赛者，指导老师）
struct Team         //参赛队伍
{
	int id_team;        //队伍编号
	string name_creation; //作品名称
	string school;      //参赛学校
	string category;   //参赛类别
	string competitor; //参赛者
	string tutor;      //指导老师
  	Team* left;        //左指针
	Team* right;       //右指针
};

所有的参赛队伍通过一个二叉排序树存储起来
Team *root;
指向根节点。

从txt录入的信息存入二维容器：
vector<vector<string>>data;

定义一个System类
class System {          //赛事系统

通过创建一个Manage_information的单例对象为它的成员实现信息管理功能的使用
private:
        	Manage_informatiom manager;
          
使用init()方法实现从txt读入数据将其用二叉排序树存储起来
void init()           //读取文件存入容器
{
按行读入txt
按#分参赛信息
存入容器
}

使用bitree（）实现二叉树的建立
void bitree()         //建立排序二叉树
{
遍历容器，编号大于则与右孩子比较
小于则与左孩子比较
添加队伍
}

使用select_function()实现各个功能的选择
void select_funtion()
{
while(输入有效){
switch(选择){
case 1:信息管理{
	switch（选择）
	case1：添加队伍
	case2：删除队伍
	case3：修改队伍
	case4：查看队伍信息
	case5：查看某一学校的所有队伍
	case88：退出系统
	}
case2：叫号系统
case3：校园导游
case88：退出系统
	  }
	 }
}


定义一个信息管理类Manage_information ,
class Manage_informatiom 

定义一系列功能函数

 //比较编号大小
bool cmp(string x1, string x2)
{
x1大于x2，返回true
小于返回false
}

使用search_id函数实现基于id的查找
Team* search_id(Team *r,string id){
r不为NULL{
r.team_id与id比较
大于则调用（search_id(r.right,id)）；
小于则调用(search_id(r.left,id))；
	}
} 

使用search_school函数实现基于学校的查找，并输出按赛事类别排序的结果
void search_school(Team* r, string school);

使用del函数实现在二叉树中删除一个队伍
void del(Team* r, string id); 

使用add函数实现插入一个新的队伍
Team* add(Team *root,Team *s);  

使用change函数实现修改一个队伍的信息
void change(Team *root,string id);  

使用show_information函数查找一个队伍并展示基本信息
void show_information(Team* r, string id);

//中序展示二叉树所有队伍信息
void show_allteam(Team* r);

使用SL函数实现总查找长度的计算
int SL(Team* r, int len); 

使用num_team函数实现计算队伍总数
int num_team(Team* r);	

//二叉排序树中序后继代替
void nextDel(Team *p);

使用一个write函数将更新后的信息写回txt，每次退出信息管理系统时写入一次
void write(Team *root);

//递归归并排序赛事类别
void MergeSort(Team* p[], Team* q[],int left,int right);

//相邻两个归并段合成一个
void Merge(Team* p[], Team* q[],int s,int m,int t);                              



